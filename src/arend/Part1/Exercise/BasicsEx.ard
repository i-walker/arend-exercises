\import Data.Bool
\import Function
\import Paths
\import Set
\import core.data.List
\import core.data.Maybe
\import core.typeclasses.Functor

-- 1. Define priorities of the functions f1, f2, f3, f4, f5 and f6 so that the function 'test' typechecks.

\func f1 (x y : Nat) => x

\func f2 : Nat => 0

\func f3 (f : Nat -> Nat) (z : Nat) : Int => 0

\func f4 : Nat => 0

\func f5 => f1

\func f6 => f4

\func test1 : f1 f2 f4 = f5 f2 f6 => idp

-- 2. Define in Arend the function 'if', which takes a boolean value b and two elements of an arbitrary type A
--    and return the first element when b equals to true and the second one otherwise.

\func if (A :\Type) (b : Bool) (a c : A): A
\elim b
  | true => a
  | false => c

-- 3. Define || via 'if'.

\func \infixr 2 || (x y : Bool) : Bool =>
  if Bool x true y

-- 4. Define the power and the factorial functions for natural numbers.

\func \infixr 8 ^ (x y : Nat): Nat
\elim y
  | zero => x
  | suc n => x Nat.* (x ^ (n))

\func fac (x : Nat) : Nat
\elim x
  | zero => 1
  | suc n => suc n Nat.* fac n

\func testfac : fac 4 = 24 => idp

-- 5. Define mod and gcd.

\func mod (x y : Nat): Nat =>
  (Nat.divMod x y).2

\func testmod : mod 4 2 = 0 => idp

-- type checker bails here

\func gcd (x y : Nat) : \Sigma Nat Nat
  | 0, 0 => {?}
  | 0, suc n => {?}
  | suc n, 0 => {?}
  | suc n, suc n1 => {?}

{-\elim y
  | zero => x
  | n => gcd n (mod x n)-}

-- 6. Define the map function. @see List.map

-- 7. Define the transpose function.

--    It takes a list of lists considered as a matrix and returns a list of lists which represents the transposed matrix.

\func transpose
  {A : \Type}
  (ll : List (List A))
  : List (List A) => headL ll nil
  \where
    \func headL {A : \Type} (_ : List (List A)) (_ : List (List A)) : List (List A) \with
      | nil, xs => xs
      | :: a l, xs =>
        \case (List.head a) \with{
          | nothing => headL l xs
          | just h => headL l (:: h xs)
        }

-- List.traverse ll (\lam (x : List A) => List.head x)

{- | zero => ll
| suc n => step n (:: (headL ll) (transpose (List.map List.tail ll)))-}
\func test2 :
  transpose
      ((1 :: 2 :: 3 :: nil) :: (4 :: 5 :: 6 :: nil) :: nil) =
  ((1 :: 4 :: nil) :: nil :: (2 :: 5 :: nil) :: (3 :: 6 :: nil) :: nil) =>
  idp

\func add {R : \Type} (x y : Nat) : (Nat -> R) -> R =>
  \lam k => k (x Nat.+ y)

\func square {R : \Type} (x : Nat) : (Nat -> R) -> R =>
  \lam k => k (x Nat.* x)

\func \infix 1 $ {A B : \Type} (f : A -> B) : A -> B =>
  \lam a => f a

-- | playing around with continuation
\func pythagoras {R : \Type} (x y : Nat) : (Nat -> R) -> R =>
  \lam k => square x $(
                        \lam x_ =>  square y $(
                                                \lam y_ => add x_ y_ $ k))

\func id_continuation : pythagoras 3 4 id = id 25 => idp

\func example'' {n m : Nat} (p : suc n = m) => p

\func example''Test (pp : 4 = 3) => example'' pp

