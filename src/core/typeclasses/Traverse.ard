\import Function
\import core.data.Id
\import core.typeclasses.Applicative
\import core.typeclasses.Foldable
\import core.typeclasses.Functor

\class Traverse \extends Functor, Foldable
  | traverse {A B : \Type}
             {G : \Type -> \Type (\suc \lp)}
             {AG : Applicative G}
             (fa : F A) (f : A -> G B) : G (F B)
  | sequence {A B : \Type}
             {G : \Type -> \Type (\suc \lp)}
             {AG : Applicative G}
             (fa : F A) : G (F A)
   -- | traverseId : traverse fa Id.just = map fa id
