\import Function
\import core.data.Id
\import core.typeclasses.Applicative
\import core.typeclasses.Foldable
\import core.typeclasses.Functor

\class Traverse \extends Functor, Foldable
  | traverse {A B : \Type}
             {G : \Type  -> \Type (\suc \lp)}
             {AG : Applicative G}
             (fa : F A) (f : A -> G B) : G (F B)
  | sequence {A : \Type}
             {G : \Type -> \Type (\suc \lp)}
             {AG : Applicative G}
             (fga : F (G A)) : G (F A)

-- | sequence = traverse fga id

-- | TODO: traverseId : traverse fa Id.just = map fa id
{-| traverse-id {A : \Type}
              {G : \Type -> \Type (\suc \lp)}
              {AG : Applicative G}
              (fa : F A) : traverse fa (\lam x => Id.just x) = map id fa-}

